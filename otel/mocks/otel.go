// Code generated by MockGen. DO NOT EDIT.
// Source: otel.go
//
// Generated by this command:
//
//	mockgen -source=otel.go -destination=mocks/otel.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/edenreich/inference-gateway/config"
	otel "github.com/edenreich/inference-gateway/otel"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenTelemetry is a mock of OpenTelemetry interface.
type MockOpenTelemetry struct {
	ctrl     *gomock.Controller
	recorder *MockOpenTelemetryMockRecorder
	isgomock struct{}
}

// MockOpenTelemetryMockRecorder is the mock recorder for MockOpenTelemetry.
type MockOpenTelemetryMockRecorder struct {
	mock *MockOpenTelemetry
}

// NewMockOpenTelemetry creates a new mock instance.
func NewMockOpenTelemetry(ctrl *gomock.Controller) *MockOpenTelemetry {
	mock := &MockOpenTelemetry{ctrl: ctrl}
	mock.recorder = &MockOpenTelemetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenTelemetry) EXPECT() *MockOpenTelemetryMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockOpenTelemetry) Init(config config.Config) (otel.TracerProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", config)
	ret0, _ := ret[0].(otel.TracerProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockOpenTelemetryMockRecorder) Init(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockOpenTelemetry)(nil).Init), config)
}
