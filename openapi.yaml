---
openapi: 3.1.0
info:
  title: Inference Gateway API
  description: API for interacting with various language models through the Inference Gateway.
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /llms:
    get:
      summary: List all language models
      responses:
        "200":
          description: A list of models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProviderModels"
  /llms/{provider}/generate:
    post:
      summary: Generate content with a specific provider's LLM
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Providers"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum:
                          - system
                          - user
                          - assistant
                      content:
                        type: string
    responses:
      "200":
        description: Generated content
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                response:
                  type: object
                  properties:
                    role:
                      type: string
                    model:
                      type: string
                    content:
                      type: string
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: Health check successful
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Authentication is available but disabled by default.
        To enable authentication, Set ENABLE_AUTH to true.
  schemas:
    Model:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        owned_by:
          type: string
        created:
          type: integer
    ProviderModels:
      type: object
      properties:
        provider:
          $ref: "#/components/schemas/Providers"
        models:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              object:
                type: string
              owned_by:
                type: string
              created:
                type: integer
    Config:
      x-config:
        general:
          title: "General settings"
          settings:
            - application_name:
                env: "APPLICATION_NAME"
                default: "inference-gateway"
                description: "The name of the application"
            - environment:
                env: "ENVIRONMENT"
                default: "production"
                description: "The environment"
            - enable_telemetry:
                env: "ENABLE_TELEMETRY"
                default: "false"
                description: "Enable telemetry"
            - enable_auth:
                env: "ENABLE_AUTH"
                default: "false"
                description: "Enable authentication"
        oidc:
          title: "OpenID Connect"
          settings:
            - issuer_url:
                env: "OIDC_ISSUER_URL"
                default: "http://keycloak:8080/realms/inference-gateway-realm"
                description: "OIDC issuer URL"
            - client_id:
                env: "OIDC_CLIENT_ID"
                default: "inference-gateway-client"
                description: "OIDC client ID"
                secret: true
            - client_secret:
                env: "OIDC_CLIENT_SECRET"
                description: "OIDC client secret"
                secret: true
        server:
          title: "Server settings"
          settings:
            - host:
                env: "SERVER_HOST"
                default: "0.0.0.0"
                description: "Server host"
            - port:
                env: "SERVER_PORT"
                default: "8080"
                description: "Server port"
            - read_timeout:
                env: "SERVER_READ_TIMEOUT"
                default: "30s"
                description: "Read timeout"
            - write_timeout:
                env: "SERVER_WRITE_TIMEOUT"
                default: "30s"
                description: "Write timeout"
            - idle_timeout:
                env: "SERVER_IDLE_TIMEOUT"
                default: "120s"
                description: "Idle timeout"
            - tls_cert_path:
                env: "SERVER_TLS_CERT_PATH"
                description: "TLS certificate path"
            - tls_key_path:
                env: "SERVER_TLS_KEY_PATH"
                description: "TLS key path"
        providers:
          title: "API URLs and keys"
          settings:
            - url:
                env: "{key}_API_URL"
                description: "The provider API URL"
            - token:
                env: "{key}_API_KEY"
                description: "The provider API key"
                secret: true
    Providers:
      type: string
      enum:
        - ollama
        - groq
        - openai
        - google
        - cloudflare
        - cohere
        - anthropic
      x-provider-configs:
        ollama:
          id: "ollama"
          url: "http://ollama:8080"
          auth_type: "none"
          endpoints:
            list:
              endpoint: "/v1/models"
              method: "GET"
              schema:
                request:
                  type: object
                  properties:
                    page:
                      type: integer
                    limit:
                      type: integer
                response:
                  type: object
                  properties:
                    models:
                      type: array
                      items:
                        $ref: "#/components/schemas/Model"
            generate:
              endpoint: "/api/generate"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    model:
                      type: string
                    prompt:
                      type: string
                    stream:
                      type: boolean
                    system:
                      type: string
                response:
                  type: object
                  properties:
                    provider:
                      type: string
                    response:
                      type: object
                      properties:
                        role:
                          type: string
                        model:
                          type: string
                        content:
                          type: string
        groq:
          id: "groq"
          url: "https://api.groq.com"
          auth_type: "bearer"
          endpoints:
            list:
              endpoint: "/openai/v1/models"
              method: "GET"
              schema:
                response:
                  type: object
                  properties:
                    models:
                      type: array
                      items:
                        type: interface{}
            generate:
              endpoint: "/openai/v1/chat/completions"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    model:
                      type: string
                    messages:
                      type: array
                      items:
                        $ref: "#/components/schemas/Message"
                response:
                  type: object
                  properties:
                    model:
                      type: string
                    choices:
                      type: array
                      items:
                        type: object
                        properties:
                          message:
                            type: object
                            properties:
                              role:
                                type: string
                              content:
                                type: string
        openai:
          id: "openai"
          url: "https://api.openai.com"
          auth_type: "bearer"
          endpoints:
            list:
              endpoint: "/v1/models"
              method: "GET"
              schema:
                response:
                  type: object
                  properties:
                    models:
                      type: array
                      items:
                        type: interface{}
            generate:
              endpoint: "/v1/completions"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    model:
                      type: string
                    messages:
                      type: array
                      items:
                        $ref: "#/components/schemas/Message"
                response:
                  type: object
                  properties:
                    model:
                      type: string
                    choices:
                      type: array
                      items:
                        type: object
                        properties:
                          message:
                            type: object
                            properties:
                              role:
                                type: string
                              content:
                                type: string
        google:
          id: "google"
          url: "https://generativelanguage.googleapis.com"
          auth_type: "query"
          endpoints:
            list:
              endpoint: "/v1beta/models"
              method: "GET"
              schema:
                response:
                  type: object
                  properties:
                    models:
                      type: array
                      items:
                        type: interface{}
            generate:
              endpoint: "/v1beta/models/{model}:generateContent"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    contents:
                      type: object
                      properties:
                        parts:
                          type: array
                          items:
                            type: object
                            properties:
                              text:
                                type: string
                response:
                  type: object
                  properties:
                    candidates:
                      type: array
                      items:
                        type: object
                        properties:
                          content:
                            type: object
                            properties:
                              parts:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    text:
                                      type: string
                              role:
                                type: string
        cloudflare:
          id: "cloudflare"
          url: "https://api.cloudflare.com/client/v4/accounts/{ACCOUNT_ID}"
          auth_type: "bearer"
          endpoints:
            list:
              endpoint: "/ai/finetunes/public"
              method: "GET"
              schema:
                response:
                  type: object
                  properties:
                    result:
                      type: array
                      items:
                        type: interface{}
            generate:
              endpoint: "/v1/chat/completions"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    prompt:
                      type: string
                response:
                  type: object
                  properties:
                    result:
                      type: object
                      properties:
                        response:
                          type: string
        cohere:
          id: "cohere"
          url: "https://api.cohere.com"
          auth_type: "bearer"
          endpoints:
            list:
              endpoint: "/v1/models"
              method: "GET"
              schema:
                response:
                  type: object
                  properties:
                    models:
                      type: array
                      items:
                        type: interface{}
            generate:
              endpoint: "/v2/chat"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    model:
                      type: string
                    messages:
                      type: array
                      items:
                        $ref: "#/components/schemas/Message"
                response:
                  type: object
                  properties:
                    message:
                      type: object
                      properties:
                        role:
                          type: string
                        content:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                              text:
                                type: string
        anthropic:
          id: "anthropic"
          url: "https://api.anthropic.com"
          auth_type: "xheader"
          extra_headers:
            anthropic-version: "2023-06-01"
          endpoints:
            list:
              endpoint: "/v1/models"
              method: "GET"
              schema:
                response:
                  type: object
                  properties:
                    models:
                      type: array
                      items:
                        type: interface{}
            generate:
              endpoint: "/v1/messages"
              method: "POST"
              schema:
                request:
                  type: object
                  properties:
                    model:
                      type: string
                    messages:
                      type: array
                      items:
                        $ref: "#/components/schemas/Message"
                response:
                  type: object
                  properties:
                    model:
                      type: string
                    choices:
                      type: array
                      items:
                        type: object
                        properties:
                          message:
                            $ref: "#/components/schemas/Message"
